/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use cm.syntax;
use custom.awesome.connectors;

public class ToStrShell extends AweDynamicShell {
    public aweShellMethod str toStr(str extraInfo);
}

public class AweObject {
    public str->Object props();
    public str _galleryId;
    public str _label;

    //used to expose multiple aweObjects at once in quick properties
    public str _uniqueQuickPropertyId;

    public constructor() {
        this.init();
    }

    extend public void init() { 

    }

    public str toS() {
        return this._label ? this._label : super();
    }

    extend public void applyFrom(AweObject source, str{} ignore=null) {
    }

    extend public void applyFrom(AweObject source, str optionName) {
    }

    extend public AweEnum applyFromOptions() {
        return null;
    }

    extend public Object get(str propName) {
        return this.props.get(propName);
    }

    extend public void set(str propName, Object value) {
        this.makePropModelAware(propName, value);
        Object oldValue = get(propName);

        //AweMaterialShell instance must never be replaced. instead, update the contents of the shell
        if(oldValue as AweMaterialShell) {
            if(value as AweMaterialShell) {
                oldValue.setMaterial(value.materialInstance());
            }
        } else {
            this.props.put(propName, value);
        }
        propChanged(propName, oldValue, value);

        for (AweSnapper snapper in this.snappers) {
            if (snapper.mainModel() == this) {
                snapper.onModelPropertyChanged(propName, oldValue, value);
            }
        }

        this.updateLimbDefaults();
    }

    extend public SubSet getDomain(str propName) {
        return null;
    }

    public str->AweStretcher _stretchers : copy=null;

    extend public AweStretcher[] getStretchers() {
        return null;
        // var bound = this.mainSnapper.localBound();

        // AweStretcher[] result();

        // result <<? this.createStretcher("width", bound.upCenterlineX);
        // result <<? this.createStretcher("depth", bound.upCenterlineY);
        // result <<? this.createStretcher("height", bound.verticalCenterline, enableA=false, visiblePosOffsetB=(0, 0, snapShapeSize));
        // result <<? this.createStretcher("elevation", bound.verticalCenterline, enableA=false, visiblePosOffsetB=(0, 0, snapShapeSize));

        // return result;
    }

    /************** prop awereness ***********************/
    extend private void makePropModelAware(str propName, Object value) {
        if(value as AweModelAwareProp) {
            value.model = this;
            value.propKey = propName;
        }
    }

    extend private void updatePropAwareness() {
        for(key, value in this.props) {
            makePropModelAware(key, value);
        }
    }

    public Object copy(CopyEnv env, bool shallow=false) {
        var c = super(..);
        c.AweObject.updatePropAwareness();
        c.AweObject.materialManager().?clear();
        return c;
    }
    /*************************************/

    extend public AweMaterialManager materialManager() {
        return this.mainSnapper.AweBindingSnapper.?materialManager;
    }
    
    extend public void propChanged(str propName, Object oldValue, Object newValue) {
    }        

    extend public void buildQuickPropertiesFromSyntax(QuickProperties props) {
    }

    extend public void buildConnectorSetProperties(QuickProperties props) {
        for(set in this.connectorSets) {
            if(set.optional and set.name()) {
                var setKey = "ConnectorSet_" # set.name();
                props.append(setKey, set.name(), set.selected, BoolSubSet());
            }
        }
    }

    extend public void buildConnectorSetAnimationProperties(AnimationProperties props) {
        for(set in this.connectorSets) {
            if(set.optional and set.name()) {
                var setKey = "ConnectorSet_" # set.name();
                props.append2(setKey, set.name(), set.selected, BoolSubSet(), lockable=false);
            }
        }
    }

    extend public bool toggleConnectorSetProperties(str key, Object value) {
        var changed = false;
        
        for(set in this.connectorSets) {
            if(set.optional and set.name()) {
                var setKey = "ConnectorSet_" # set.name();
                if(key == setKey) {
                    set.selected = value.bool;
                    changed = true;
                }
            }
        }

        return changed;
    }

    extend public bool buildQuickProperties(QuickProperties props) {
        this.buildQuickPropertiesFromSyntax(props);
        this.buildConnectorSetProperties(props);
        this.sortQuickProperties(props);
        
        return props and props.properties.any();
    }

    extend public void sortQuickProperties(QuickProperties props) {
        str[] sortOrder = this.quickPropertySort();
        if ( sortOrder and sortOrder.count > 0 ) {
            for( qp in props.properties ) {
                if ( sortOrder.indexOf( qp.key ) == -1 ) sortOrder << qp.key;
            }
            props.properties.sort( function aweQPSort, sortOrder );
        }
    }

    extend public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        var changed = false;
        
        if(!testChangeOnly)
            changed = this.toggleConnectorSetProperties(key, value);
        
        return changed;
    }

    extend public str getQuickPropertyLabel(str key, Object value) {
        return null;
    }

    extend public str[] quickPropertySort() { return null; }

    extend public void buildAnimationPropertiesFromSyntax(AnimationProperties props) {
    }

    extend public void buildAnimationProperties(AnimationProperties props) {
        this.buildAnimationPropertiesFromSyntax(props);
        this.buildConnectorSetAnimationProperties(props);
        //There is no animationProperties.sort
    }

    extend public void animationPropertyChanged(str key, Object value) {
        this.toggleConnectorSetProperties(key, value);
    }

    public AweProduct _product : stream=null, copy=null;

    extend public AweProduct getProduct() {
        if (!this._product) {
            this._product = this.createProduct();
        }

        return this._product;
    }

    extend public AweProduct createProduct() {
        return null;
    }

    extend public str toS(str format, rest: Object[] extraParams) {
        str->Object props();
        for(obj in extraParams, index=i) {
            props.put(i.toS, obj);
        }
        return toS(format, props);
    }

    extend public str toS(str format, str->Object extraParams=null) { 
        str->Object props = this.props.copy();
        if(extraParams) {
            for(k,v in extraParams) {
                props.put(k,v);
            }
        }

        if (!format or !props and !props.any) { return format; }

        str->str formattedData(); 
        bool capture = false;
        str token = "";
        for (s in format) { 

            if (s == '{') { 
                capture = true;
                continue;
            } 
            
            else if (s == '}') { 
                capture = false;

                Int precision;
                str extraParam;
                var originalToken = token;

                if ( extraParams and extraParams.get(token) != null ) {
                    props.set( token, this.toS( extraParams.get(token).str ));
                } 

                var toInches = false;
                if (token.indexOf(":") > -1) { 
                    var data = token.split(':');
                    token = data.v0;
                    toInches = (data.v1.toLower().indexOf("inch") > -1);
                    if (toInches) { 
                        var extraInfo = data.v1.split(':');
                        if (extraInfo.v1) { 
                            precision = extraInfo.v1.toInt;
                        }
                    } else { 
                        precision = data.v1.toInt;
                        if (!precision) { 
                            extraParam = data.v1.toS;
                        }
                    }
                }
                

                var target = props.get(token);
                if (target as Double) { 
                    formattedData.put( token, getNumberAsFormatted(target, precision, toInches=toInches ) );
                } else if (target as Distance) { 
                    formattedData.put( token, getNumberAsFormatted(target.v, precision, toInches=toInches ) );
                } else {
                    str value = ""; 
                    if (target) { 
                        var formattedValue = ToStrShell(target).toStr(extraParam);
                        if (formattedValue != null) { 
                            value = formattedValue;
                        } else { 
                            value = target.toS();
                        }
                    }
                    formattedData.put(token, value);
                }

                format = format.replaceAll("{" # originalToken # "}",  "{" # token # "}");
                token = "";
                continue;
            }

            if (capture) { 
                token #= s;
            }

        }

        for (k,v in formattedData) { 
            format = format.replaceAll("{" # k # "}", v);
        }

        return format;
    }

    extend private str getNumberAsFormatted( Double target, Int precision, bool toInches ) {
        if (target) {   
            var targetValue = target.v;
            if (toInches) {
                targetValue /= 1inch;
            }
            return (precision) ? targetValue.toS(precision.v) : targetValue.toS();
        } else { 
            return "";
        }
    }

    extend public Anonymous Anonymous() {
        return this.props;
    }

    extend public void validate(AweValidationIssues issues) {
        for(validator in this.getValidators()) if(validator.active) {
            validator.validate(issues);
        }

        for(set in connectorSets) if(set.active) {
            set.validate(issues);
        }
    }

    extend public AweValidator[] getValidators() {
        AweValidator[] validators();
        return validators;
    }

    /************** query ****************/

    extend public AweObject{} query(str query) {
        AweObjectQueryIndex index(this);
        return index.get(query);
    }

    extend public AweObject[] toAweObjectArray(Object propValue) {
        
        AweObject[] array();

        var iteratorBase = propValue.?class.?iterator.?instantiate();

        aweTryCast (iteratorBase as iterator to SeqIterator, SetIterator) {
            iterator.init(propValue);
            
            while (iterator.step()) {
                AweObject obj = iterator.get.AweObject;
                if(obj)
                    array << obj;
            }
        }
        else { 
            if (iteratorBase as MapIterator) { 
                iteratorBase.init(propValue);

                while (iteratorBase.step()) {
                    AweObject obj = iteratorBase.v.AweObject;
                    if(obj)
                        array << obj;
                } 
            }
        }

        return array.count > 0 ? array : null;
    }

    public AweObject parent: copy=reference;

    extend public AweObject{} children() {
        AweObject{} children();
        for(k,v in this.props) {
            if(v as AweObject) {
                children << v;
            } else {
                var array = this.toAweObjectArray(v);
                if(array) {
                    children += array;
                }
            }
        }
        for(c in children) {
            c.parent = this;
        }
        return children;
    }

    extend public AweObject{} descendants(AweObject{} visited = null) {
        if(!visited) {
            visited = new AweObject{}();
        }

        for(c in this.children) {
            if(c !in visited) {
                visited << c;
                visited += c.descendants(visited);
            }
        }

        return visited;
    }

    /************* snappers reference and invalidation ***********/
    public Snapper{} snappers : copy=null, stream=null;

    extend public Snapper mainSnapper() {
        return this.snappers.?get();
    }

    extend public void invalidate() {
        for(s in snappers) {
            if(s and s.isAlive) {
                if(s as AweSnapper) {
                    s.refresh(true, true);
                } else if(s) {
                    s.invalidate();
                }
            } else {
                this.snappers.remove(s);
            }
        }
    }

    extend public void appendSnapper(Snapper s) {
        if(!snappers) init snappers();
        snappers << s;
    }


    /************** connect events ************/
    extend public void connected(Connector thisConnector, Connector otherConnector, AweObject model) {

    }

    extend public void connected(AweObject model) {

    }

    extend public void disconnected(Connector thisConnector, Connector otherConnector, AweObject model) {

    }

    extend public void disconnected(AweObject model) {

    }

    extend public AweObject{} directlyConnectedModels() {
        AweObject{} connected();
        for(connector in this.getConnectors(null)) {
            for(attach in connector.connections) {
                var model = attach.getModel();
                if(model) {
                    connected << model;
                }
            }
        }
        return connected;
    }

    extend public bool is(Type t) {
        Type thisType = this.class;
        return thisType.isAssignableTo(t);
    }

    /************** exposing connectors ***************/

    extend public Connector getConnectorById(str connectorFullId) {
        var snapper = this.mainSnapper();
        for(set in connectorSets) if(set.active()) {
            if(!set.connectorCache) {
                if(!snapper) continue;
                set.connectorCache = new AweConnectorCache(snapper);
            }
            set.connectorCache.clearBuffer();
            set.connectors(set.connectorCache, ghostMode=false);
            for(c in set.connectorCache.buffer) {
                if(connectorFullId == set.class.toS() # "." # c.getId) {
                    c.setModel(this);
                    return c;
                }
            }
        }
        return null;
    }

    extend public Connector{} getConnectors(Snapper snapper=null, bool ghostMode=false) {
        if(snapper) {
            this.appendSnapper(snapper);
        }
        Connector{} connectors();
        for(set in connectorSets) if(set.active()) {
            if(!set.connectorCache) {
                if(!snapper) continue;
                set.connectorCache = new AweConnectorCache(snapper);
            }
            set.connectorCache.clearBuffer();
            set.connectors(set.connectorCache, ghostMode=ghostMode);
            for(c in set.connectorCache.buffer) {
                c.setConnectorSet(set);
                c.setModel(this);
                connectors << c;
            }
        }

        //ghosts
        var ghostConnectors = this.getGhostConnectors();
        for(c in ghostConnectors) {
            connectors << c; 
        }

        return connectors;
    }

    private Field{} _connectorSetFields;
    extend public AweConnectorSet{} connectorSets() {
        if(!_connectorSetFields) {
            init _connectorSetFields();
            for(field in this.class.fields) {
                Object value = this.get(field);
                if(value in AweConnectorSet) {
                    _connectorSetFields << field;
                }
            }
        }
        AweConnectorSet{} sets();
        for(field in _connectorSetFields) {
            Object value = this.get(field);
            if(value as AweConnectorSet) {
                if(value)
                    sets << value;
            }
        }
        return sets;
    }

    /************* automations ***************/
    extend public AweGroupAutomation[] getGroupAutomations() {
        return null;
    }

    /***************** schemes ******************/
    extend public bool applyScheme(AweObject schemeModel) {
        return false;
    }

    //invoked by AweModelLimb
    extend public void updateWithLatestSchemes() {
        for(model in getLatestAweSchemeModels()) {
            this.applyScheme(model);
        }
    }

    /**************** update settings ****************/
    //this is set by AweModelLimb if / when this model is placed by one
    public str limbKey;

    extend public void updateLimbDefaults() {
        //limb settings
        if(this.limbKey) {
            custom.awesome.ui.modelLimbDefaults.put(this.limbKey, this.copy());
        } else if(this.parent) {
            this.parent.updateLimbDefaults();
        }
    }

    /*************** g-g-g-ghost! *****************/
    private AweGhost{} _ghosts : copy=null, stream=null;

    extend public void appendGhosts(AweGhost{} ghosts) {

    }

    extend public AweGhost{} getGhosts() {
        if(!this._ghosts) {
            init this._ghosts();
            this.appendGhosts(this._ghosts);
        }
        return this._ghosts;
    }

    extend public Connector{} getGhostConnectors() {
        Connector{} ghostConnectors();
        for(ghost in this.getGhosts()) {
            for(c in ghost.getConnectors()) {
                c.setGhost(ghost);
                ghostConnectors << c;
            }
        }
        return ghostConnectors;
    }

}

public definition @visibility aweObject @name=id @parentClass=["extends" type]? '{'  @props=["props" formalArgList ';']? @members=[classMember]* '}' {
    if (!parentClass) {
        parentClass = new SType("AweObject");
    }

    SMembers gettersSetters(noSrcRef);
    SMembers onChange(noSrcRef);
    SStatements initProps();
    SStatements onPropChanged();

    if (props) {
        for (i in 0..(props.count - 1)) {
            SFormalArg arg = props[i];
            SType propType = arg.typeSyntax;
            SId propName = arg.id;
            str propNameStr = propName.name;
            SExpr propInitialValue = arg.default();
            SId onChangeMethodName(propName#"Changed");
            
            //3 signatures for change
            onChange << member {
                extend @visibility void @onChangeMethodName() { }
                extend @visibility void @onChangeMethodName(@propType newValue) { }
                extend @visibility void @onChangeMethodName(@propType oldValue, @propType newValue) { }
            };

            gettersSetters << member {
                extend @visibility @propType @propName() {
                    Object value = this.get(@propNameStr);
                    if(value) {
                        return value.@propType;
                    }
                    return @propInitialValue;
                }

                extend @visibility @propType @propName=(@propType newValue) {
                    @propType oldValue = this.@propName;

                    this.set(@propNameStr, newValue);
                    
                    return newValue;
                }
            };

            onPropChanged << statement {
                if (propName == @propNameStr) {
                    this.@onChangeMethodName();
                    this.@onChangeMethodName(newValue.?@propType);
                    this.@onChangeMethodName(oldValue.?@propType, newValue.?@propType);
                }
            };

            initProps << statement {
                this.@propName = @propName;
            };
        }
    }
    
    SId baseClassName(name.name#"_BaseClass");

    SMembers membersBundle(noSrcRef);
    for(m in members) {
        membersBundle << m;
    }

    if(props) {
        definition {
            @visibility class @baseClassName extends @parentClass {
                @gettersSetters;
                @onChange;

                @visibility void propChanged(str propName, Object oldValue, Object newValue) {
                    super(..);
                    
                    @onPropChanged;
                }
            }
        };

        definition {
            @visibility class @name extends @baseClassName {
                public constructor(@props) {
                    super();
                }

                public void init() { 
                    super();
                    @initProps;
                }

                @membersBundle;
            }
        };
    } else  {
        //pretty useless, huh?
        definition {
            @visibility class @name extends @parentClass {
                @membersBundle;
            }
        };
    }
    
}

public member @visibility aweObjectDomain @domains=formalArgList ';' {
    SMembers domainMembers(noSrcRef);
    SStatements buildQuickProperties();
    SStatements quickPropertiesChanged();

    SStatements buildAnimationProperties();
    SStatements animationPropertiesChanged();

    SStatements applyFrom();
    SStatements getDomain();
    
    for (i in 0..(domains.count-1)) {
        SFormalArg arg = domains[i];
        SId propName = arg.id;
        str propNameStr = propName.name;
        SType propType = arg.typeSyntax;
        SId domainName(arg.id.name#"Domain");
        SExpr domainInitialValue = arg.default();
        SId labelName(arg.id.name#"Label");
        SId visibleName(arg.id.name#"Visible");

        domainMembers << member {
            @visibility SubSet @domainName = @domainInitialValue;
            @visibility str @labelName = @propNameStr.propNameToLabel();
            @visibility bool @visibleName = true;
        };

        //we use distance subsets for double properties, so we need this great if statement there:
        if (propType.type == distance) {
            buildQuickProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(this._uniqueQuickPropertyId # @propNameStr, @labelName, distance(@propName), @domainName);
                        }
                    }
                }
            };

            buildAnimationProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            // props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append2(this._uniqueQuickPropertyId # @propNameStr, @labelName, distance(@propName), @domainName, lockable=false);
                        }
                    }
                }
            };

            applyFrom << statement {
                if (@domainName and @visibleName and @propNameStr !in ignore) {
                    if (Object value = source.get(@propNameStr)) {
                        // aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));
                        
                        if (@domainName.contains(value)) {
                            this.@propName = value.@propType;
                        }
                    }
                }
            };
        }
        else {
            buildQuickProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(this._uniqueQuickPropertyId # @propNameStr, @labelName, @propName, @domainName);
                        }
                    }
                }
            };

            buildAnimationProperties << statement {
                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            // props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append2(this._uniqueQuickPropertyId # @propNameStr, @labelName, @propName, @domainName, lockable=false);
                        }
                    }
                }
            };

            applyFrom << statement {
                if (@domainName and @visibleName and @propNameStr !in ignore) {
                    if (Object value = source.get(@propNameStr)) {
                        aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);
                        
                        if (@domainName.contains(value)) {
                            this.@propName = value.@propType;
                        }
                    }
                }
            };
        }
        
        quickPropertiesChanged << statement {
            if (key == this._uniqueQuickPropertyId # @propNameStr) {
                this.@propName = value.@propType;
                return true;
            }
        };

        animationPropertiesChanged << statement {
            if (key == this._uniqueQuickPropertyId # @propNameStr) {
                this.@propName = value.@propType;
            }
        };

        getDomain << statement {
            if (propName == @propNameStr) {
                return @domainName;
            }
        };
    }

    return member {
        @domainMembers;
                
        @visibility void buildQuickPropertiesFromSyntax(QuickProperties props) {
            super(..);
            @buildQuickProperties;           
        }

        @visibility bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
            if (key and !testChangeOnly) {
                @quickPropertiesChanged;
            }
            return super(..);
        }

        @visibility void buildAnimationPropertiesFromSyntax(AnimationProperties props) {
            super(..);
            @buildAnimationProperties;
        }

        @visibility void animationPropertyChanged(str key, Object value) {
            super(..);
            @animationPropertiesChanged;
        }

        @visibility void applyFrom(AweObject source, str{} ignore=null) {
            if (this.is(source.class)) {
                super(..);
                @applyFrom;
            }
        }

        @visibility SubSet getDomain(str propName) {
            @getDomain;

            return super(..);
        }
    };
}

public int aweAPSort( AnimationProperty a, AnimationProperty b, Object order ) {
    return propertySort( a.key, b.key, order );
}

public int aweQPSort( QuickProperty a, QuickProperty b, Object order ) {
    return propertySort( a.key, b.key, order );
}

private int propertySort( str a, str b, Object order ) {
    if ( order as str[] ) {
        int aIndex = order.indexOf( a );
        int bIndex = order.indexOf( b );

        if ( aIndex > bIndex ) return bIndex == -1 ? -1 : 1; // if B wasn't in the list, push it to the end
        if ( bIndex > aIndex ) return aIndex == -1 ? 1 : -1; // if A wasn't in the list, push it to the end
    }
    return 0;
}