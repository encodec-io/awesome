/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use custom.awesome.connectors;
use custom.awesome.gallery;
use custom.awesome.electrical;

private alias SnapperArray = Snapper{};

private const str applyToKey = "awe-apply-from";
private const str helpLinkKey = "awe-help-link";

public class AweSnapper extends Snapper {
    public aweDynamicContract {
        aweDynamic void realign(SnapperArray visited=null);        
        aweDynamic void galleryChanged(AweGallery gallery);
        aweDynamic bool mustConnect();
    }

    private AwePart[] parts();
    public AweConnectorCache connectorCache(this);

    public constructor() { 
    }

    public AweObject activeConfigurator;

    extend public AweObject[] allModels() {
        return new AweObject[]();
    }

    extend public AweObject mainModel() {
        var allModels = allModels();
        return allModels.?count > 0 ? allModels.first() : null;        
    }

    extend private void appendSelfToModels() {
        for(m in allModels()) {
            m.appendSnapper(this);
        } 
    }

    extend public AweProduct[] allProducts() {
        return new AweProduct[]();
    }

    extend public AweGeometry[] allGeometries() {
        AweGeometry[] geometries();
        for(p in allProducts()) {
            geometries += p.geometries;
        }
        return geometries;
    }

    extend public void galleryChanged(AweGallery gallery) {
        bool shouldRefresh = false;
        var items = gallery.getItems();
        
        for (model in this.allModels()) {
            for (galleryItem in items) {
                if (model._galleryId == galleryItem.id) {
                    model.applyFrom(galleryItem.data);
                    
                    shouldRefresh = true;
                }
            }
        }

        if (shouldRefresh) {
            this.refresh(true, true);
        }
    }

    /************** connections ***************/

    extend public bool mustConnect() {
        return true;
    }

    extend public void connectors(AweConnectorCache cc) {
    }

    public void connectors(ConnectorCollection collection) { 
        if(!this.connectorCache)
            this.connectorCache = new AweConnectorCache(this);
        
        this.connectorCache.clearBuffer();
        this.connectors(this.connectorCache);

        for(c in this.connectorCache.buffer) {
            var mainModel = this.mainModel();
            if(mainModel)
                c.setModel(mainModel);
        }

        for (product in this.allProducts()) {
            product.createConnectors(this.connectorCache);
        }
        
       
        
        this.connectorCache.addToConnectors(collection);

        //connector sets in models
        for(m in allModels) {
            for(c in m.getConnectors(this)) {
                collection << c;
            }
        }

        super(collection);
    }

    public double connectLineAlignConnector(ConnectLine s, Connector c, double t) {
        if ( cm.win.isControlKeyDown() ) {
            return super(..);  
        } else {
            return t; 
        }
    }


    public bool buildQuickProperties(QuickProperties props) { 
        if (this.activeConfigurator) {
            return this.activeConfigurator.buildQuickProperties(..);
        }

        return super(..);
    }

    public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        if (this.activeConfigurator and !testChangeOnly) {
            bool changed = this.activeConfigurator.quickPropertyChanged(..);
            
            this.onPropertyChanged(key, value);
            this.refresh(true, true);
            
            return changed;
        }

        return super(..);
    }

    extend public void onPropertyChanged(str key, Object value) {
    }

    extend public void addExtraAnimationProperties(AnimationProperties props) { }

    extend public void extraAnimationPropertyChanged( str key, Object value) { }

    public Animation insertAnimation(StartInsertAnimationEnv env) {
        return new AweInsertAnimation(env);
    }

    /**
     * Loops through all connected snappers and try to realign them just like 
     * (re)alignAllSnapped would do except it will check individually if that
     * connector should realign (realign property of the connector)
     * It also triggers realign on all connected snappers that have the realign method 
     */
    extend public void realign(Snapper{} visited=null) {
        if (!visited) {
            visited = {Snapper: this};
        }
        else {
            if (this in visited) return;
            
            visited << this;
        }

        for (attach in this.connectors()) {
            if(attach) {
                var realign = aweDynamicCall attach.shouldRealign();
                var connections = attach.connections() ? attach.connections() : {Connector: attach.connection()};

                if (connections != null) {
                    if (realign.?bool) {
                        for (connection in connections) if(connection) {
                            alignConnectors(connection, attach, visited=null, invalidate3D=false, removeFromBsp=false, tryRealign=true, forcePropagate=false);
                            
                            var snapper = connection.snapper;
                            if(snapper) {
                                aweDynamicCall snapper.realign(visited);
                            }
                        }
                    }

                    for (connection in connections) {
                        var realignConnected = aweDynamicCall connection.shouldRealign();

                        if (realignConnected.?bool) {
                            var other = attach;

                            alignConnectors(other, connection, visited=null, invalidate3D=false, removeFromBsp=false, tryRealign=true, forcePropagate=false);
                        }
                    }
                }
            }
        }
    }

    /*********** refreshing ***********/
    extend public void refresh(bool updateConnectors=false, bool tryAlignAllSnapped=false) {
        if (updateConnectors)  this.updateConnectors();
        if (tryAlignAllSnapped) this.realign(null);

        invalidateQuickPropertiesFor(this);
        invalidate();
        this.space.invalidateSelection();
    }

    public void invalidated(dirty3D flag3D) {
        this.appendSelfToModels();
        invalidateLights();
        super(..);
    }

    public void invalidated(dirty2D flag2D) {
        this.appendSelfToModels();
        super(..);
        
    }

    extend public str helpLink() {
        return null;
    }

    /***********************************************************************
     * Parts
     ***********************************************************************/
    
    public void getParts(PartsEnv env, Snapper{} visited) {
        var products = allProducts();

        if (products.count == 0 or this in visited) return;
        
        visited << this;

        for( product in products ) {
            var parts = product.getParts();

            for (part in parts) {
                part.data.setOwner(this);
                
                env << part;
                this.parts << part;
            }
        }
    }

    public bool denyParts() {
        return this.allProducts.count == 0;
    }

    /***********************************************************************
     * Parts Query Dialog
     ***********************************************************************/

    public TreeViewItem[] popupMenuItems(View view, DropDownMenu ddm) {
        var items = super(..);
        
        if (selectMode == userSelect.single) {
            if (AweEnum options = this.mainModel.applyFromOptions()) {
                for (entry in options.entries) {
                    items << new ImageTreeViewItem(format("@applyToKey;_@entry.name;"), format("Apply @entry.value; to Selection"), icon("copy"));
                }
            }
            else {
                items << new ImageTreeViewItem(applyToKey, "Apply to Selection", icon("copy"));
            }
        }

        items << new DelimiterTreeViewItem();
        items << this.getAweQueryDialogItem(view, ddm);

        if (this.helpLink()) {
            items << new ImageTreeViewItem(helpLinkKey, "Help", icon("helpbubble"));
        }
        
        return items;
    }

    public bool popupMenuItemClicked(View view, MenuCallbackEnv env) {
        if (this.aweQueryDialogItemClicked(view, env)) {
            return true;
        }
        else if (env.key == helpLinkKey) {
            cm.os.openLocation(this.helpLink());
        }
        else if (env.key.beginsWith(applyToKey)) {
            this.applyToSelection(env.key);
        }

        return super(view, env);
    }

    extend private void applyToSelection(str key) {
        str optionName = null;
        
        if (key.contains("_")) {
            optionName = key.split('_').v1;
        }

        for (snapper in this.space.selection) if (snapper != this) {
            if (snapper as AweSnapper) {
                if (optionName) {
                    snapper.mainModel.applyFrom(this.mainModel, optionName);
                }
                else {
                    snapper.mainModel.applyFrom(this.mainModel);
                }

                snapper.refresh(true, true);
            }
        }
    }

    /************ validation ***************/
    public void appendInvalidation(InvalidList invalidList) {
        
        AweValidationIssues issues({Snapper: this});

        validate(issues);
        for(model in allModels()) {
            model.validate(issues);
        }
        for(product in allProducts()) {
            product.validate(issues);
            product.validateGeometries(issues);
        }

        this.validateParts(this.parts, issues);

        issues.feed(invalidList);
    }

    extend public void validateParts(AwePart[] parts, AweValidationIssues issues) {
    }

    extend public void validate(AweValidationIssues issues) {
    }

    /************ lights **************/

    /* !!!!! important !!!!****/
    //remeber to return false on deny lights on your snapper, like this:
    // public bool denyLights() { return false; }

    public Light3D[] getLights(FetchLightEnv env) {
        Light3D[] light3Ds();
        for(model in lightModels()) {
            light3Ds << AweLight3D(this, model);
        }
        return light3Ds;
    }

    

    private AweLightModel[] _lightModels;
    extend public AweLightModel[] lightModels() {
        if(!_lightModels) {
            _lightModels = new AweLightModel[]();
        }
        for(g in allGeometries) {
            g.lights.clear();
            g.buildLights();
            for(model in g.lights) {
                _lightModels << model;
            }
        }
        return _lightModels;
    }

    extend private bool hasLights() {
        return lightModels().any();
    }

    extend private void invalidateLights() {
        if(hasLights()) {
            _lightModels = null;
            if (space) space.invalidateLight3D(this);
        }
    }

    public void removed(RemoveSnappersEnv env) {
        invalidateLights();
        super(env);
    }
    public void suspended() {
        invalidateLights();
        super();
    }
    public void unsuspended() {
        super();
        invalidateLights();
    }

    public bool dbg_connectLinesIn3D() {
        if (developMode) {
            for (set in this.mainModel.connectorSets()) {
                if (set.debug) return true;
            }
        }
        
        return false;
    }
}

